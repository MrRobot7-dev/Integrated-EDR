/**
 * Malware Detection System JavaScript
 * Handles UI interactions and data visualization
 */

// Store prediction history
const predictionHistory = {
    init: function() {
        // Initialize from localStorage if available
        const stored = localStorage.getItem('predictionHistory');
        if (stored) {
            try {
                this.history = JSON.parse(stored);
            } catch (e) {
                console.error('Error parsing prediction history:', e);
                this.history = [];
            }
        } else {
            this.history = [];
        }
    },
    
    add: function(index, prediction, actualLabel) {
        // Add to history
        this.history.push({
            index: index,
            prediction: prediction,
            actualLabel: actualLabel,
            timestamp: new Date().toISOString()
        });
        
        // Keep only the last 50 entries
        if (this.history.length > 50) {
            this.history = this.history.slice(-50);
        }
        
        // Save to localStorage
        localStorage.setItem('predictionHistory', JSON.stringify(this.history));
    },
    
    get: function() {
        return this.history;
    },
    
    clear: function() {
        this.history = [];
        localStorage.removeItem('predictionHistory');
    }
};

// Initialize prediction history
predictionHistory.init();

/**
 * Display the prediction result with appropriate styling
 */
function displayResult(actualLabel, rawPrediction, index) {
    const resultEl = document.getElementById("prediction-result");
    if (!resultEl) return;
    
    // Store in history
    predictionHistory.add(index, rawPrediction, actualLabel);
    
    // Format the prediction value
    const formattedPrediction = parseFloat(rawPrediction).toFixed(2);
    
    // Update the UI based on the actual label
    if (actualLabel === 0) {
        // Benign sample
        resultEl.innerHTML = `
            <div class="prediction-indicator benign">
                <span class="prediction-label">Benign</span>
                <span class="prediction-value">${formattedPrediction}%</span>
            </div>
        `;
    } else {
        // Malicious sample
        resultEl.innerHTML = `
            <div class="prediction-indicator malware">
                <span class="prediction-label">Malicious</span>
                <span class="prediction-value">${formattedPrediction}%</span>
            </div>
        `;
    }
}

/**
 * Initialize the application
 */
document.addEventListener('DOMContentLoaded', function() {
    // Add event listeners for form submission
    const predictForm = document.querySelector('.predict-form');
    if (predictForm) {
        predictForm.addEventListener('submit', function(e) {
            const indexInput = document.getElementById('index');
            if (indexInput && !indexInput.value) {
                e.preventDefault();
                alert('Please enter a valid sample index');
            }
        });
    }
    
    // Add keyboard navigation for sample browsing
    document.addEventListener('keydown', function(e) {
        // Only handle if we're on the result page
        if (document.querySelector('.result-container')) {
            if (e.key === 'ArrowRight') {
                // Next sample
                const nextLink = document.querySelector('a[href*="Next Sample"]');
                if (nextLink) nextLink.click();
            } else if (e.key === 'ArrowLeft') {
                // Previous sample
                const prevLink = document.querySelector('a[href*="Previous Sample"]');
                if (prevLink) prevLink.click();
            }
        }
    });
    
    // Initialize tooltips if available
    initTooltips();
});

/**
 * Initialize tooltips for elements with data-tooltip attribute
 */
function initTooltips() {
    const tooltipElements = document.querySelectorAll('[data-tooltip]');
    
    tooltipElements.forEach(element => {
        element.addEventListener('mouseenter', function(e) {
            const tooltip = document.createElement('div');
            tooltip.className = 'tooltip';
            tooltip.textContent = this.getAttribute('data-tooltip');
            
            document.body.appendChild(tooltip);
            
            // Position the tooltip
            const rect = this.getBoundingClientRect();
            tooltip.style.top = rect.top - tooltip.offsetHeight - 10 + 'px';
            tooltip.style.left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2) + 'px';
            
            // Add event listener to remove tooltip on mouse leave
            this.addEventListener('mouseleave', function() {
                document.body.removeChild(tooltip);
            }, { once: true });
        });
    });
}

/**
 * Export prediction data as CSV
 */
function exportPredictions() {
    const history = predictionHistory.get();
    if (history.length === 0) {
        alert('No prediction history to export');
        return;
    }
    
    // Create CSV content
    let csvContent = 'Index,Prediction,Actual Label,Timestamp\n';
    
    history.forEach(item => {
        csvContent += `${item.index},${item.prediction},${item.actualLabel},${item.timestamp}\n`;
    });
    
    // Create download link
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.setAttribute('href', url);
    link.setAttribute('download', `malware_predictions_${new Date().toISOString().slice(0, 10)}.csv`);
    link.style.visibility = 'hidden';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
